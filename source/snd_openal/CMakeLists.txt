project(snd_openal)

include_directories(${VORBIS_INCLUDE_DIR} ${OGG_INCLUDE_DIR} ".")

file(GLOB SND_OPENAL_HEADERS
    "*.h"
    "../gameshared/anorms.h"
	"../gameshared/q_*.h"
    "../gameshared/gs_qrespath.h"
	"../client/snd_public.h"
)

file(GLOB SND_OPENAL_SOURCES
    "*.c"
    "*.cpp"
    "../snd_common/*.c"
    "../snd_common/*.cpp"
    "../gameshared/q_*.c"
)

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        set(SND_OPENAL_PLATFORM_LIBRARIES "m" "dl" "atomic")
else ()
        set(SND_OPENAL_PLATFORM_LIBRARIES "")
endif()

# Force -O3 for GCC or Clang release builds
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux" OR "Darwin")
    if(${CMAKE_BUILD_TYPE} MATCHES "Release")
        set_source_files_properties("snd_propagation.cpp" PROPERTIES COMPILE_FLAGS "-O3")
    endif ()
endif ()

set(OPENAL_SOFT_DIR "${CMAKE_HOME_DIRECTORY}/../third-party/openal-soft")

# CMAKE_EXECUTABLE_SUFFIX breaks CheckTypeSize used by OpenAL-soft's
# cmake file.
set(SAVE_CMAKE_EXECUTABLE_SUFFIX "${CMAKE_EXECUTABLE_SUFFIX}")
set(CMAKE_EXECUTABLE_SUFFIX "${DEFAULT_CMAKE_EXECUTABLE_SUFFIX}")

# Breaks linking with ar used by OpenAL-soft
set(SAVE_CMAKE_EXE_LINKER_FLAGS    "${CMAKE_EXE_LINKER_FLAGS}")
set(SAVE_CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}")
set(SAVE_CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}")
set(SAVE_CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS}")
unset(CMAKE_EXE_LINKER_FLAGS)
unset(CMAKE_MODULE_LINKER_FLAGS)
unset(CMAKE_SHARED_LINKER_FLAGS)
unset(CMAKE_STATIC_LINKER_FLAGS)

set(SAVE_CMAKE_EXE_LINKER_FLAGS_DEBUG    "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
set(SAVE_CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
set(SAVE_CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
set(SAVE_CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS_DEBUG}")
unset(CMAKE_EXE_LINKER_FLAGS_DEBUG)
unset(CMAKE_MODULE_LINKER_FLAGS_DEBUG)
unset(CMAKE_SHARED_LINKER_FLAGS_DEBUG)
unset(CMAKE_STATIC_LINKER_FLAGS_DEBUG)

set(SAVE_CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(SAVE_CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE}")
set(SAVE_CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(SAVE_CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE}")
unset(CMAKE_EXE_LINKER_FLAGS_RELEASE)
unset(CMAKE_MODULE_LINKER_FLAGS_RELEASE)
unset(CMAKE_SHARED_LINKER_FLAGS_RELEASE)
unset(CMAKE_STATIC_LINKER_FLAGS_RELEASE)

add_subdirectory("${OPENAL_SOFT_DIR}" "${OPENAL_SOFT_DIR}/build" EXCLUDE_FROM_ALL)
set_property(TARGET OpenAL PROPERTY POSITION_INDEPENDENT_CODE TRUE)
set_property(TARGET OpenAL PROPERTY ALSOFT_HRTF_DEFS ON)
set_property(TARGET OpenAL PROPERTY ALSOFT_EMBED_HRTF_DATA ON)

set(CMAKE_EXE_LINKER_FLAGS    "${SAVE_CMAKE_EXE_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS "${SAVE_CMAKE_MODULE_LINKER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS "${SAVE_CMAKE_SHARED_LINKER_FLAGS}")
set(CMAKE_STATIC_LINKER_FLAGS "${SAVE_CMAKE_STATIC_LINKER_FLAGS}")
unset(SAVE_CMAKE_EXE_LINKER_FLAGS)
unset(SAVE_CMAKE_MODULE_LINKER_FLAGS)
unset(SAVE_CMAKE_SHARED_LINKER_FLAGS)
unset(SAVE_CMAKE_STATIC_LINKER_FLAGS)

set(CMAKE_EXE_LINKER_FLAGS_DEBUG    "${SAVE_CMAKE_EXE_LINKER_FLAGS_DEBUG}")
set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${SAVE_CMAKE_MODULE_LINKER_FLAGS_DEBUG}")
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${SAVE_CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${SAVE_CMAKE_STATIC_LINKER_FLAGS_DEBUG}")
unset(SAVE_CMAKE_EXE_LINKER_FLAGS_DEBUG)
unset(SAVE_CMAKE_MODULE_LINKER_FLAGS_DEBUG)
unset(SAVE_CMAKE_SHARED_LINKER_FLAGS_DEBUG)
unset(SAVE_CMAKE_STATIC_LINKER_FLAGS_DEBUG)

set(CMAKE_EXE_LINKER_FLAGS_RELEASE    "${SAVE_CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${SAVE_CMAKE_MODULE_LINKER_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${SAVE_CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${SAVE_CMAKE_STATIC_LINKER_FLAGS_RELEASE}")
unset(SAVE_CMAKE_EXE_LINKER_FLAGS_RELEASE)
unset(SAVE_CMAKE_MODULE_LINKER_FLAGS_RELEASE)
unset(SAVE_CMAKE_SHARED_LINKER_FLAGS_RELEASE)
unset(SAVE_CMAKE_STATIC_LINKER_FLAGS_RELEASE)

set(CMAKE_EXECUTABLE_SUFFIX "${SAVE_CMAKE_EXECUTABLE_SUFFIX}")
unset(SAVE_CMAKE_EXECUTABLE_SUFFIX)

add_library(snd_openal_soft SHARED ${SND_OPENAL_HEADERS} ${SND_OPENAL_SOURCES})
target_include_directories(snd_openal_soft BEFORE PRIVATE "${OPENAL_SOFT_DIR}/include")
target_link_libraries(snd_openal_soft PRIVATE ${OGG_LIBRARY} ${VORBIS_LIBRARIES} ${SND_OPENAL_PLATFORM_LIBRARIES} OpenAL)
target_compile_definitions(snd_openal_soft PRIVATE OPENAL_SOFT_STATIC)
qf_set_output_dir(snd_openal_soft libs)
